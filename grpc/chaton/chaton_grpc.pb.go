// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatonClient is the client API for Chaton service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatonClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Chaton_ConnectClient, error)
}

type chatonClient struct {
	cc grpc.ClientConnInterface
}

func NewChatonClient(cc grpc.ClientConnInterface) ChatonClient {
	return &chatonClient{cc}
}

func (c *chatonClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Chaton_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chaton_ServiceDesc.Streams[0], "/chaton.Chaton/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatonConnectClient{stream}
	return x, nil
}

type Chaton_ConnectClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type chatonConnectClient struct {
	grpc.ClientStream
}

func (x *chatonConnectClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatonConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatonServer is the server API for Chaton service.
// All implementations must embed UnimplementedChatonServer
// for forward compatibility
type ChatonServer interface {
	Connect(Chaton_ConnectServer) error
	mustEmbedUnimplementedChatonServer()
}

// UnimplementedChatonServer must be embedded to have forward compatible implementations.
type UnimplementedChatonServer struct {
}

func (UnimplementedChatonServer) Connect(Chaton_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedChatonServer) mustEmbedUnimplementedChatonServer() {}

// UnsafeChatonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatonServer will
// result in compilation errors.
type UnsafeChatonServer interface {
	mustEmbedUnimplementedChatonServer()
}

func RegisterChatonServer(s grpc.ServiceRegistrar, srv ChatonServer) {
	s.RegisterService(&Chaton_ServiceDesc, srv)
}

func _Chaton_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatonServer).Connect(&chatonConnectServer{stream})
}

type Chaton_ConnectServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type chatonConnectServer struct {
	grpc.ServerStream
}

func (x *chatonConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatonConnectServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chaton_ServiceDesc is the grpc.ServiceDesc for Chaton service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chaton_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chaton.Chaton",
	HandlerType: (*ChatonServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Chaton_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaton.proto",
}
